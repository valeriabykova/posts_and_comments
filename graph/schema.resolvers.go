package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.64

import (
	"context"
	"fmt"
	"posts/graph/model"
)

type Storage interface {
	CreatePost(post *model.NewPost) (*model.Post, error)
	CreateComment(comment *model.NewComment) (*model.Comment, error)
	Posts(page *int32, limit int32) ([]*model.Post, error)
	Post(id string) (*model.Post, error)
	Comment(id string) (*model.Comment, error)
	Comments(postID string, first int32, after *string) (*model.CommentsConnection, error)
	Replies(ParentID string, first int32, after *string) (*model.CommentsConnection, error)
}

// CreatePost is the resolver for the createPost field.
func (r *mutationResolver) CreatePost(ctx context.Context, post *model.NewPost) (*model.Post, error) {
	return r.storage.CreatePost(post)
}

// CreateComment is the resolver for the createComment field.
func (r *mutationResolver) CreateComment(ctx context.Context, comment *model.NewComment) (*model.Comment, error) {
	return r.storage.CreateComment(comment)
}

// Post is the resolver for the post field.
func (r *queryResolver) Post(ctx context.Context, id string) (*model.Post, error) {
	return r.storage.Post(id)
}

// Comment is the resolver for the comment field.
func (r *queryResolver) Comment(ctx context.Context, id string) (*model.Comment, error) {
	return r.storage.Comment(id)
}

// Posts is the resolver for the posts field.
func (r *queryResolver) Posts(ctx context.Context, page *int32, limit int32) ([]*model.Post, error) {
	if limit <= 0 {
		return nil, fmt.Errorf("limit has to be positive integer")
	}
	return r.storage.Posts(page, limit)
}

// Comments is the resolver for the comments field.
func (r *postResolver) Comments(ctx context.Context, obj *model.Post, first *int32, after *string) (*model.CommentsConnection, error) {
	if first != nil && *first <= 0 {
		return nil, fmt.Errorf("first has to be positive integer")
	}
	limit := int32(5)
	if first != nil {
		limit = *first
	}
	return r.storage.Comments(obj.ID, limit, after)
}

// Replies is the resolver for the replies field.
func (r *commentResolver) Replies(ctx context.Context, obj *model.Comment, first *int32, after *string) (*model.CommentsConnection, error) {
	if first != nil && *first <= 0 {
		return nil, fmt.Errorf("first has to be positive integer")
	}
	limit := int32(5)
	if first != nil {
		limit = *first
	}
	return r.storage.Replies(obj.ID, limit, after)
}

// Comment returns CommentResolver implementation.
func (r *Resolver) Comment() CommentResolver { return &commentResolver{r} }

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Post returns PostResolver implementation.
func (r *Resolver) Post() PostResolver { return &postResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type commentResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type postResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
